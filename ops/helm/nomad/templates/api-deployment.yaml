apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nomad.fullname" . }}-app-gunicorn-log-config
  labels:
    app.kubernetes.io/name: {{ include "nomad.name" . }}-app-gunicorn-log-config
    helm.sh/chart: {{ include "nomad.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  gunicorn.log.conf: |
    [loggers]
    keys=root, gunicorn.error, gunicorn.access

    [handlers]
    keys=console, access, error

    [formatters]
    keys=generic

    [logger_root]
    level=INFO
    handlers=console

    [logger_gunicorn.error]
    level=INFO
    handlers=error
    qualname=gunicorn.error

    [logger_gunicorn.access]
    level=INFO
    handlers=access
    qualname=gunicorn.access

    [handler_console]
    class=StreamHandler
    formatter=generic
    args=(sys.stdout, )

    [handler_access]
    class=StreamHandler
    formatter=generic
    args=(sys.stdout, )

    [handler_error]
    class=StreamHandler
    formatter=generic
    args=(sys.stdout, )

    [formatter_generic]
    format=%(asctime)s [%(process)d] [%(levelname)s] %(message)s
    datefmt=%Y-%m-%d %H:%M:%S
    class=logging.Formatter
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nomad.fullname" . }}-app-gunicorn-config
  labels:
    app.kubernetes.io/name: {{ include "nomad.name" . }}-app-gunicorn-config
    helm.sh/chart: {{ include "nomad.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  gunicorn.conf: |
    secure_scheme_headers = {'X-FORWARDED-PROTOCOL': 'ssl', 'X-FORWARDED-PROTO': 'https', 'X-FORWARDED-SSL': 'on'}
    worker_class = '{{ .Values.app.workerClass }}'
    threads = {{ .Values.app.threads }}
    worker_connections = 1000
    worker = {{ .Values.app.worker }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nomad.fullname" . }}-app
  labels:
    app.kubernetes.io/name: {{ include "nomad.name" . }}-app
    helm.sh/chart: {{ include "nomad.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "nomad.name" . }}-app
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "nomad.name" . }}-app
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ include "nomad.name" . }}-app
        image: "{{ .Values.images.nomad.name }}:{{ .Values.images.nomad.tag }}"
        volumeMounts:
        - mountPath: /app/nomad.yaml
          name: nomad-conf
          subPath: nomad.yaml
        - mountPath: /app/gunicorn.log.conf
          name: gunicorn-log-conf
          subPath: gunicorn.log.conf
        - mountPath: /app/gunicorn.conf
          name: gunicorn-conf
          subPath: gunicorn.conf
        - mountPath: /app/.volumes/fs/public
          name: public-volume
        - mountPath: /app/.volumes/fs/staging
          name: staging-volume
        - mountPath: /nomad
          name: nomad-volume
        env:
        - name: NOMAD_SERVICE
          value: "app"
        - name: NOMAD_CONSOLE_LOGLEVEL
          value: "{{ .Values.app.console_loglevel }}"
        - name: NOMAD_LOGSTASH_LEVEL
          value: "{{ .Values.app.logstash_loglevel }}"
       {{ if .Values.api.apiSecret }}
        - name: NOMAD_SERVICES_API_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api.apiSecret}}
              key: password
        {{ end }}
        {{ if .Values.keycloak.clientSecret }}
        - name: NOMAD_KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.keycloak.clientSecret }}
              key: password
        {{ end }}
        {{ if .Values.keycloak.passwordSecret }}
        - name: NOMAD_KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.keycloak.passwordSecret }}
              key: password
        {{ end }}
        command: ["python", "-m", "gunicorn.app.wsgiapp", "--config", "gunicorn.conf", "--log-config", "gunicorn.log.conf", "-b 0.0.0.0:8000", "nomad.app:app"]
        livenessProbe:
          httpGet:
            path: "{{ .Values.proxy.external.path }}/alive"
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: "{{ .Values.proxy.external.path }}/alive"
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 5
      nodeSelector:
        nomadtype: {{ .Values.app.nomadNodeType }}
      imagePullSecrets:
      - name: {{ .Values.images.secret }}
      imagePullPolicy: always
      volumes:
      - name: gunicorn-log-conf
        configMap:
          name: {{ include "nomad.fullname" . }}-app-gunicorn-log-config
      - name: gunicorn-conf
        configMap:
          name: {{ include "nomad.fullname" . }}-app-gunicorn-config
      - name: nomad-conf
        configMap:
          name: {{ include "nomad.fullname" . }}-configmap
      - name: public-volume
        hostPath:
          path: {{ .Values.volumes.public }}
          type: Directory
      - name: staging-volume
        {{ if (eq .Values.worker.storage "memory") }}
        emptyDir:
          medium: 'Memory'
        {{ else }}
        hostPath:
          path: {{ .Values.volumes.staging}}
          type: Directory
        {{ end }}
      - name: nomad-volume
        hostPath:
          path: {{ .Values.volumes.nomad }}
          type: Directory
