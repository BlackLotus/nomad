apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nomad.fullname" . }}-gui-config
  labels:
    app.kubernetes.io/name: {{ include "nomad.name" . }}-gui-config
    helm.sh/chart: {{ include "nomad.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  nginx.conf: |
    server {
      listen        80;
      server_name   www.example.com;

      location {{ .Values.proxy.external.path }} {
        proxy_set_header Host $host;
        proxy_pass_request_headers on;
        proxy_pass http://{{ include "nomad.fullname" . }}-app:8000;
        proxy_connect_timeout {{ .Values.proxy.timeout }};
        proxy_send_timeout {{ .Values.proxy.timeout }};
        proxy_read_timeout {{ .Values.proxy.timeout }};
        send_timeout {{ .Values.proxy.timeout }};
      }

      location {{ .Values.proxy.external.path }}/gui {
        root      /app/;
        rewrite ^{{ .Values.proxy.external.path }}/gui/(.*)$ /nomad/$1 break;
        try_files $uri {{ .Values.proxy.external.path }}/gui/index.html;
      }

      location {{ .Values.proxy.external.path }}/gui/service-worker.js {
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;
        root      /app/;
        rewrite ^{{ .Values.proxy.external.path }}/gui/service-worker.js /nomad/service-worker.js break;
      }

      location {{ .Values.proxy.external.path }}/gui/meta.json {
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;
        root      /app/;
        rewrite ^{{ .Values.proxy.external.path }}/gui/meta.json /nomad/meta.json break;
      }

      location {{ .Values.proxy.external.path }}/api/uploads {
        client_max_body_size 35g;
        proxy_request_buffering off;
        proxy_set_header Host $host;
        proxy_pass_request_headers on;
        proxy_pass http://{{ include "nomad.fullname" . }}-app:8000;
        proxy_connect_timeout {{ .Values.proxy.timeout }};
      }

      location {{ .Values.proxy.external.path }}/api/raw {
        proxy_buffering off;
        proxy_set_header Host $host;
        proxy_pass_request_headers on;
        proxy_pass http://{{ include "nomad.fullname" . }}-app:8000;
        proxy_connect_timeout {{ .Values.proxy.timeout }};
      }
    }
  env.js: |
    window.nomadEnv = {
      "appBase": "{{ .Values.proxy.external.path }}",
      "kibanaBase": "{{ .Values.proxy.external.kibanaPath }}",
      "keycloakBase": "{{ .Values.keycloak.serverUrl }}",
      "keycloakRealm": "{{ .Values.keycloak.realmName }}",
      "keycloakClientId": "{{ .Values.keycloak.guiClientId }}",
      "matomoSiteId": {{ .Values.gui.matomoSiteId }},
      "matomoUrl": "{{ .Values.gui.matomoUrl }}",
      "sendTrackingData": {{ .Values.gui.sendTrackingData }},
      "debug": {{ .Values.gui.debug }}
    };
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nomad.fullname" . }}-gui
  labels:
    app.kubernetes.io/name: {{ include "nomad.name" . }}-gui
    helm.sh/chart: {{ include "nomad.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.gui.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "nomad.name" . }}-gui
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "nomad.name" . }}-gui
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ include "nomad.name" . }}-gui
        image: "{{ .Values.images.frontend.name }}:{{ .Values.images.frontend.tag }}"
        command: ["./run.sh",  "{{ .Values.proxy.external.path }}"]
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          readOnly: true
          name: nginx-conf
        - mountPath: /app/nomad/env.js
          readOnly: true
          subPath: env.js
          name: nomad-app
        - mountPath: /var/log/nginx
          name: log
        livenessProbe:
          httpGet:
            path: "{{ .Values.proxy.external.path }}/gui/index.html"
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: "{{ .Values.proxy.external.path }}/gui/index.html"
            port: 80
          initialDelaySeconds: 3
          periodSeconds: 3
      nodeSelector:
        nomadtype: public
      imagePullSecrets:
      - name: {{ .Values.images.secret }}
      imagePullPolicy: always
      volumes:
      - name: nginx-conf
        configMap:
          name: {{ include "nomad.fullname" . }}-gui-config
          items:
          - key: nginx.conf
            path: default.conf
      - name: nomad-app
        configMap:
          name: {{ include "nomad.fullname" . }}-gui-config
          items:
          - key: env.js
            path: env.js
      - name: log
        emptyDir: {}
