# default installed image for docker executor is: python:3.6
# using an image that can do git, docker, docker-compose
image: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair/ci-runner:latest

stages:
  - build
  - test
  - deploy
  - release

variables:
  TEST_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  STABLE_IMAGE: ${CI_REGISTRY_IMAGE}:stable
  LATEST_IMAGE: ${CI_REGISTRY_IMAGE}:latest

build:
  stage: build
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive --jobs=4
    # create the version information
    - ./gitinfo.sh
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
  script:
    - docker build -t $TEST_IMAGE .
    - docker push $TEST_IMAGE
  rules:
    - if: $CI_COMMIT_TAG
      when: never

python linting:
  stage: test
  image: $TEST_IMAGE
  script:
    - cd /app
    - python -m pycodestyle --config=pycodestyle.ini nomad tests
    - python -m pylint --load-plugins=pylint_mongoengine,nomad.metainfo.pylint_plugin nomad tests
    - python -m mypy --ignore-missing-imports --follow-imports=silent --no-strict-optional nomad tests
  rules:
    - if: $CI_COMMIT_TAG
      when: never

gui linting:
  stage: test
  before_script:
    - git submodule sync
    - git submodule update --init -- gui/materia gui/crystcif-parse
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev search-quantities > gui/src/searchQuantities.json
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev units > gui/src/unitsData.js
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev toolkit-metadata > gui/src/toolkitMetadata.json
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev metainfo > gui/src/metainfo.json
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev parser-metadata > gui/src/parserMetadata.json
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev example-upload-metadata > gui/src/exampleUploads.json
    - docker run --rm $TEST_IMAGE cat dependencies/nomad-remote-tools-hub/tools.json > gui/src/northTools.json
  script:
    - cd gui
    - yarn --network-timeout 1200000
    - yarn run lint
  rules:
    - if: $CI_COMMIT_TAG
      when: never

python tests:
  stage: test
  image: $TEST_IMAGE
  services:
    - name: rabbitmq:3.9.13
      alias: rabbitmq
    - name: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
      alias: elastic
      command:
        - bash
        - "-c"
        - ES_JAVA_OPTS="-Xms512m -Xmx512m" docker-entrypoint.sh elasticsearch -Ediscovery.type=single-node -Expack.security.enabled=false
    - name: mongo:5.0.6
      alias: mongo
  variables:
    RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
    RABBITMQ_DEFAULT_USER: rabbitmq
    RABBITMQ_DEFAULT_PASS: rabbitmq
    RABBITMQ_DEFAULT_VHOST: /
    NOMAD_RABBITMQ_HOST: rabbitmq
    NOMAD_ELASTIC_HOST: elastic
    NOMAD_MONGO_HOST: mongo
    NOMAD_KEYCLOAK_PASSWORD: ${CI_KEYCLOAK_ADMIN_PASSWORD}
    NOMAD_NORMALIZE_SPRINGER_DB_PATH: /nomad/fairdi/db/data/springer.msg
  script:
    - sleep 5
    - curl http://elastic:9200/_cat/health
    - cd /app
    - ls /builds
    - python -m pytest --cov=nomad -sv tests
  rules:
    - if: $CI_COMMIT_TAG
      when: never

gui tests:
  stage: test
  variables:
      NODE_OPTIONS: --max_old_space_size=4096
  before_script:
    - git submodule sync
    - git submodule update --init -- gui/materia gui/crystcif-parse
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev search-quantities > gui/src/searchQuantities.json
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev units > gui/src/unitsData.js
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev toolkit-metadata > gui/src/toolkitMetadata.json
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev example-upload-metadata > gui/src/exampleUploads.json
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev metainfo > gui/src/metainfo.json
    - docker run --rm $TEST_IMAGE python -m nomad.cli dev parser-metadata > gui/src/parserMetadata.json
    - docker run --rm $TEST_IMAGE cat dependencies/nomad-remote-tools-hub/tools.json > gui/src/northTools.json
  script:
    - cd gui
    - yarn --network-timeout 1200000
    - yarn test --ci --collectCoverage --reporters=default --reporters=jest-junit --silent
  coverage: /Lines\s*:\s*(\d+.?\d*)%/
  artifacts:
    when: always
    reports:
      junit:
        - gui/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: gui/coverage/cobertura-coverage.xml
  rules:
    - if: $CI_COMMIT_TAG
      when: never

install tests:
  stage: test
  image: python:3.7
  before_script:
    - git submodule sync --recursive
    - sleep 5
    - git submodule update --init --recursive --jobs=4
  script:
    - pip install --upgrade pip
    - pip install fastentrypoints
    - pip install pyyaml
    - pip install numpy
    - python setup.py compile
    - python setup.py sdist
    - pip install dist/nomad-lab-*.tar.gz
    - python -c "import nomad.datamodel, nomad.datamodel.metainfo, nomad.client"
    - pip install `echo dist/nomad-lab-*.tar.gz`[parsing]
    - python -m nomad.cli parse tests/data/parsers/vasp/vasp.xml
    - git clone --branch v1.0.0 https://github.com/nomad-coe/nomad-parser-example.git example-parser
    - cd example-parser
    - python exampleparser/__main__.py tests/data/example.out
  rules:
    - if: $CI_COMMIT_TAG
      when: never

dev setup tests:
  stage: test
  image: python:3.7
  script:
    - pip install --upgrade pip
    - ./setup.sh
    - python -m nomad.cli parse tests/data/parsers/vasp/vasp.xml
    - python -c "import nomad.app"
    - python -c "import nomad.processing"
  rules:
    - if: $CI_COMMIT_TAG
      when: never

deploy dev:
  stage: deploy
  environment:
    name: dev/$CI_COMMIT_REF_NAME
    deployment_tier: development
    url: https://nomad-lab.eu/dev/rae/${CI_ENVIRONMENT_SLUG}
    auto_stop_in: 7 days
    on_stop: stop deploy dev
  before_script:
    - mkdir ~/.kube/
    - echo ${CI_K8S_CONFIG} | base64 -d > ~/.kube/config
  script:
    - helm dependency update ops/kubernetes/nomad
    - helm upgrade ${CI_ENVIRONMENT_SLUG} ops/kubernetes/nomad
      --install
      --namespace nomad
      --values ops/kubernetes/deployments/dev-values.yaml
      --set proxy.external.path=/dev/rae/${CI_ENVIRONMENT_SLUG}
      --set jupyterhub.hub.baseUrl=/dev/rae/${CI_ENVIRONMENT_SLUG}/north
      --set jupyterhub.fullnameOverride=${CI_ENVIRONMENT_SLUG}-north
      --set jupyterhub.singleuser.podNameTemplate="${CI_ENVIRONMENT_SLUG}-north-{username}--{servername}"
      --set jupyterhub.hub.config.GenericOAuthenticator.oauth_callback_url=https://nomad-lab.eu/dev/rae/${CI_ENVIRONMENT_SLUG}/north/hub/oauth_callback
      --set image.tag=$CI_COMMIT_REF_SLUG
      --set roll=true
      --timeout=15m
      --wait
  needs: ["build"]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual

stop deploy dev:
  stage: deploy
  environment:
    name: dev/$CI_COMMIT_REF_NAME
    action: stop
  before_script:
    - mkdir ~/.kube/
    - echo ${CI_K8S_CONFIG} | base64 -d > ~/.kube/config
  script:
    - helm uninstall ${CI_ENVIRONMENT_SLUG} --namespace nomad
  needs: ["build"]
  rules:
    - when: manual


deploy prod staging:
  stage: deploy
  environment:
    name: staging
    deployment_tier: production
    url: https://nomad-lab.eu/prod/v1/staging
  before_script:
    - mkdir ~/.kube/
    - echo ${CI_K8S_PROD_CONFIG} | base64 -d > ~/.kube/config
  script:
    - helm dependency update ops/kubernetes/nomad
    - helm upgrade nomad-staging-v1 ops/kubernetes/nomad
      --install
      --values ops/kubernetes/deployments/prod-staging-values.yaml
      --set image.tag=$CI_COMMIT_REF_SLUG
      --set roll=true
      --timeout=15m
      --wait
    - docker pull $TEST_IMAGE
    - docker run -t -e NOMAD_KEYCLOAK_REALM_NAME=fairdi_nomad_prod $TEST_IMAGE python -m nomad.cli client -n https://nomad-lab.eu/prod/v1/staging/api -u test -w $CI_NOMAD_TEST_PASSWORD integrationtests  --skip-publish --skip-doi
  rules:
    - when: manual

deploy prod test:
  stage: deploy
  environment:
    name: test
    deployment_tier: production
    url: https://nomad-lab.eu/prod/v1/test
  before_script:
    - mkdir ~/.kube/
    - echo ${CI_K8S_PROD_CONFIG} | base64 -d > ~/.kube/config
  script:
    - helm dependency update ops/kubernetes/nomad
    - helm upgrade nomad-test-v1 ops/kubernetes/nomad
      --install
      --values ops/kubernetes/deployments/prod-test-values.yaml
      --set image.tag=$CI_COMMIT_REF_SLUG
      --set roll=true
      --timeout=15m
      --wait
    - docker pull $TEST_IMAGE
    - docker run -t -e NOMAD_KEYCLOAK_REALM_NAME=fairdi_nomad_prod $TEST_IMAGE python -m nomad.cli client -n https://nomad-lab.eu/prod/v1/test/api -u test -w $CI_NOMAD_TEST_PASSWORD integrationtests  --skip-publish --skip-doi
  rules:
    - when: manual

deploy prod util:
  stage: deploy
  before_script:
    - mkdir ~/.kube/
    - echo ${CI_K8S_PROD_CONFIG} | base64 -d > ~/.kube/config
  script:
    - helm dependency update ops/kubernetes/nomad
    - helm upgrade nomad-util-v1 ops/kubernetes/nomad
      --install
      --values ops/kubernetes/deployments/prod-util-values.yaml
      --set image.tag=$CI_COMMIT_REF_SLUG
      --set roll=true
      --timeout=15m
      --wait
  rules:
    - when: manual

deploy prod develop:
  stage: deploy
  environment:
    name: develop
    deployment_tier: production
    url: https://nomad-lab.eu/prod/v1/develop
  before_script:
    - mkdir ~/.kube/
    - echo ${CI_K8S_PROD_CONFIG} | base64 -d > ~/.kube/config
  script:
    - helm dependency update ops/kubernetes/nomad
    - helm upgrade nomad-develop-v1 ops/kubernetes/nomad
      --install
      --namespace default
      --values ops/kubernetes/deployments/prod-develop-values.yaml
      --set image.tag=$CI_COMMIT_REF_SLUG
      --set roll=true
      --timeout=15m
      --wait
    - docker pull $TEST_IMAGE
    - docker run
      -t -e NOMAD_KEYCLOAK_REALM_NAME=fairdi_nomad_prod
      $TEST_IMAGE
      python -m nomad.cli client -n https://nomad-lab.eu/prod/v1/develop/api -u test -w $CI_NOMAD_TEST_PASSWORD integrationtests  --skip-publish --skip-doi
  needs: ["build"]
  rules:
    - when: manual

release latest image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE $LATEST_IMAGE
    - docker push $LATEST_IMAGE
  rules:
    - when: manual

release stable image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE $LATEST_IMAGE
    - docker push $LATEST_IMAGE
    - docker tag $TEST_IMAGE $STABLE_IMAGE
    - docker push $STABLE_IMAGE
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never

python package:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
    - docker pull $TEST_IMAGE
    - docker run --rm $TEST_IMAGE python -m twine upload -u gitlab-ci-token -p ${CI_JOB_TOKEN} --repository-url https://gitlab.mpcdf.mpg.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/nomad-lab-*.tar.gz
  rules:
    - when: manual

pypi package:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
    - docker pull $TEST_IMAGE
    - docker run --rm $TEST_IMAGE bash -c "python -m twine upload -u $CI_TWINE_USER -p $CI_TWINE_PASSWORD dist/nomad-lab-*.tar.gz"
  rules:
    - when: manual
