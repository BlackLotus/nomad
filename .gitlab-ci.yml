# default installed image for docker executor is: python:3.6
# using an image that can do git, docker, docker-compose
image: youpy/docker-compose-git

# Uncomment the next lines, to run each pipline/job in its own docker environment.
# Otherwise, it will use the docker of the gitlab runner host (e.g. enc-preprocessing...).
# This will give it access to a persitent layer cache, which will not be available
# with the docker service.
# services:
#   - docker:dind

stages:
  - build
  - test
  - integration
  - release
  - deploy

variables:
  TEST_IMAGE: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair:test_${CI_COMMIT_REF_NAME}
  RELEASE_IMAGE: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair:${CI_COMMIT_REF_NAME}
  STABLE_IMAGE: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair:stable
  LATEST_IMAGE: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair:latest
  FRONTEND_TEST_IMAGE: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair/frontend:test_${CI_COMMIT_REF_NAME}
  FRONTEND_RELEASE_IMAGE: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair/frontend:${CI_COMMIT_REF_NAME}
  FRONTEND_STABLE_IMAGE:  gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair/frontend:stable
  FRONTEND_LATEST_IMAGE: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-fair/frontend:latest
  KUBECONFIG: /etc/deploy/config

build:
  stage: build
  before_script:
    - git submodule sync
    - git submodule update --init
    - ./gitinfo.sh
  script:
    # ignore test directories of dependencies, there is a lot of data that we not use
    # in the context of the docker image
    - find dependencies -name "*test*" -type d -exec echo "{}/" \;  >> .dockerignore
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
    - docker build -t $TEST_IMAGE .
    - docker push $TEST_IMAGE
  except:
    - /^dev-.*$/
    - tags


buildgui:
  stage: build
  script:
    - cd gui
    - ./version.sh
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
    - docker build -t $FRONTEND_TEST_IMAGE .
    - docker push $FRONTEND_TEST_IMAGE
  except:
    - /^dev-.*$/
    - tags

linting:
  stage: test
  image: $TEST_IMAGE
  script:
    - cd /app
    - python -m pycodestyle --ignore=E501,E701,E731 nomad tests
    - python -m pylint --load-plugins=pylint_mongoengine nomad tests
    - python -m mypy --ignore-missing-imports --follow-imports=silent --no-strict-optional nomad tests
  except:
    refs:
      - tags
    variables:
      - $CI_COMMIT_REF_NAME =~ /^dev-.*$/
      - $CI_COMMIT_MESSAGE =~ /\[skip[ _-]tests?\]/i

tests:
  stage: test
  image: $TEST_IMAGE
  services:
    - postgres:latest
      # this will cause a warning, as the gitlab ci runner health check will test the wrong
      # port on rabbitmq container:
      # https://gitlab.com/gitlab-org/gitlab-runner/issues/3163
    - rabbitmq
    - name: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
      alias: elastic
      # fix issue with running elastic in gitlab ci runner:
      # https://gitlab.com/gitlab-org/gitlab-ce/issues/42214
      command: [ "bin/elasticsearch", "-Ediscovery.type=single-node" ]
  variables:
    POSTGRES_DB: nomad
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: nomad
    RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
    RABBITMQ_DEFAULT_USER: rabbitmq
    RABBITMQ_DEFAULT_PASS: rabbitmq
    RABBITMQ_DEFAULT_VHOST: /
    NOMAD_REPOSITORY_DB_HOST: postgres
    NOMAD_RABBITMQ_HOST: rabbitmq
    NOMAD_ELASTIC_HOST: elastic
    NOMAD_MONGO_HOST: mongo
    NOMAD_SPRINGER_DB_PATH: /nomad/fairdi/db/data/springer.db
  script:
    - cd /app
    - ls /builds
    - python -m pytest --cov=nomad -sv tests
  except:
    refs:
      - tags
    variables:
      - $CI_COMMIT_REF_NAME =~ /^dev-.*$/
      - $CI_COMMIT_MESSAGE =~ /\[skip[ _-]tests?\]/i

release:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE $LATEST_IMAGE
    - docker push $LATEST_IMAGE
    - docker pull $FRONTEND_TEST_IMAGE
    - docker tag $FRONTEND_TEST_IMAGE $FRONTEND_LATEST_IMAGE
    - docker push $FRONTEND_LATEST_IMAGE
  except:
    - /^dev-.*$/
  when: manual

release_version:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.mpcdf.mpg.de
    - docker pull $LATEST_IMAGE
    - docker tag $LATEST_IMAGE $RELEASE_IMAGE
    - docker tag $LATEST_IMAGE $STABLE_IMAGE
    - docker push $RELEASE_IMAGE
    - docker push $STABLE_IMAGE
    - docker pull $FRONTEND_LATEST_IMAGE
    - docker tag $FRONTEND_LATEST_IMAGE $FRONTEND_RELEASE_IMAGE
    - docker tag $FRONTEND_LATEST_IMAGE $FRONTEND_STABLE_IMAGE
    - docker push $FRONTEND_RELEASE_IMAGE
    - docker push $FRONTEND_STABLE_IMAGE
  only:
    - tags

## TODO This has to be fixed, we need one for testing, staging, production
# deploy_coe_staging:
#   stage: deploy
#   image: dtzar/helm-kubectl
#   before_script:
#     - mkdir -p /etc/deploy
#     # kube_config is a CI/CD variable set in GitLab GUI
#     - echo $CI_KUBE_CONFIG | base64 -d > /etc/deploy/config
#     - helm init --upgrade
#     - helm repo add stable https://kubernetes-charts.storage.googleapis.com/
#     - helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/
#     - helm repo update
#   script:
#     - cd ops/helm/nomad
#     - export KUBECONFIG=/etc/deploy/config
#     - helm dep build
#     - helm upgrade nomad-coe-staging . --recreate-pods;
#   except:
#     - /^dev-.*$/
#   when: manual
